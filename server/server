#!/usr/bin/env python3

from flask import Flask, render_template
from flask_socketio import SocketIO, emit
import subprocess
import os
import json
import importlib.util
import re
from matplotlib.figure import Figure
import io
import base64


app = Flask(
    __name__,
    static_folder="build/static",
    template_folder="build"
)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, cors_allowed_origins="*")

BASE_DIR = os.path.dirname(os.path.dirname(__file__))
ALGO_DIR = os.path.join(BASE_DIR, "algo")

RE_INFO = re.compile(r"run_([a-z0-9]*)")


def get_path(algo):
    return os.path.join(ALGO_DIR, algo)


def get_all_names():
    return [entry.name for entry in os.scandir(ALGO_DIR)]


def get_results(algo):
    results_fp = os.path.join(get_path(algo), "data", "results.txt")
    if os.path.exists(results_fp):
        with open(results_fp) as f:
            return json.load(f)
    else:
        runners = filter(lambda fn: RE_INFO.match(fn) is not None,
                         os.listdir(get_path(algo)))
        return {name: "?" for name in runners}


def to_dict(algo):
    return {"times": get_results(algo), "name": algo}


@app.route('/')
def index():
    return render_template('index.html', algos=get_all_names())


@socketio.on("run")
def run(algo, args=()):
    try:
        emit("notification", f"{algo} is running")

        path = get_path(algo)
        spec = importlib.util.spec_from_loader(
            "librun",
            importlib.machinery.SourceFileLoader("librun", os.path.join(path, "run")))
        librun = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(librun)
        times = {}
        for runnable, _time in librun.main(librun.PARSER.parse_args(args)):
            times[runnable] = _time
            push_times(algo, times)
            socketio.sleep(0)
    except Exception as e:
        print(e)
        print(f"Algo: '{algo}' could not run")
        print(f"Tried to execute: {os.path.join(path, 'run')}")


@socketio.on("generate")
def generate(algo):
    try:
        path = get_path(algo)
        subprocess.run(["./generate"], cwd=path)
        emit("end_generate", algo)
    except Exception as e:
        print(e)
        print(f"Could not generate data for: {algo}")
        print(f"Tried to execute: {os.path.join(path, 'generate')}")


@socketio.on("fetch_names")
def push_names(*args):
    emit("push_names", {"algos": get_all_names()})


@socketio.on("fetch_results")
def push_results(names=None):
    emit("notification", "fetching results")
    algos = get_all_names() if names is None else names
    emit("push_results", {algo: to_dict(algo) for algo in algos})


def push_times(algo, times):
    emit("push_results", {algo: {"times": times, "name": algo}})


@socketio.on("message")
def print_msg(msg):
    print(msg)


@socketio.on('connect')
def test_connect():
    print("Client connected")
    push_names()
    push_results()
    push_generate_args()


@socketio.on('disconnect')
def test_disconnect():
    print('Client disconnected')


def get_generate_args(name):
    fp = os.path.join(get_path(name), "generate")
    spec = importlib.util.spec_from_loader(
        "libgen",
        importlib.machinery.SourceFileLoader("libgen", fp))
    libgen = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(libgen)
    return libgen.ARGUMENTS


@socketio.on("fetch_generate_args")
def push_generate_args(names=None):
    """Emits {algo_name: [arg_name]}"""
    try:
        if names is None:
            names = get_all_names()
        args = {name: list(get_generate_args(name)) for name in names}
        emit("push_generate_args", args)
    except Exception as e:
        emit("notification", f"An error occured while fetching generate args"
             " for {algo}")
        print(e)


@app.route("/plot/<algo>", methods=["GET"])
def plot(algo):
    widths, labels = [], []
    for name, t in to_dict(algo)["times"].items():
        labels.append(name)
        try:
            widths.append(float(t))
        except ValueError:
            widths.append(0)
    if not widths:
        return ""
    fig = Figure(figsize=(5, .5 * (len(widths) + 1)))
    ax = fig.subplots()
    ax.barh(y=tuple(range(len(widths))), width=widths, tick_label=labels)
    b = io.BytesIO()
    fig.set_tight_layout(True)
    fig.savefig(b, format="png")
    data = base64.b64encode(b.getbuffer()).decode("ascii")
    return data


if __name__ == '__main__':
    socketio.run(app,
                 debug=True,
                 use_reloader=True)
