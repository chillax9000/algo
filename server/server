#!/usr/bin/env python3

from flask import Flask, render_template
from flask_socketio import SocketIO, emit
import subprocess
import os
import json
import importlib.util
import re

app = Flask(__name__,
            static_folder="build/static",
            template_folder="build"
)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, cors_allowed_origins="*")

BASE_DIR = os.path.dirname(os.path.dirname(__file__))
ALGO_DIR = os.path.join(BASE_DIR, "algo")

RE_INFO = re.compile(r"run_([a-z0-9]*)")

def get_path(algo):
    return os.path.join(ALGO_DIR, algo)


def get_all_algos():
    return [entry.name for entry in os.scandir(ALGO_DIR)]


def get_results(algo):
    results_fp = os.path.join(get_path(algo), "results.txt")
    if os.path.exists(results_fp):
        with open(results_fp) as f:
            return json.load(f)
    else:
        runners = filter(lambda fn: RE_INFO.match(fn) is not None,
                         os.listdir(get_path(algo)))
        return {name: "?" for name in runners}


def to_dict(algo):
    return {"times": get_results(algo), "name": algo}


@app.route('/')
def index():
    return render_template('index.html', algos=get_all_algos())


@socketio.on("run")
def run(algo):
    try:
        path = get_path(algo)
        subprocess.run(["./run"], cwd=path)
        push_results([algo])
    except Exception as e:
        print(e)
        print(f"Algo: '{algo}' could not run")
        print(f"Tried to execute: {os.path.join(path, 'run')}")


@socketio.on("generate")
def generate(algo):
    try:
        path = get_path(algo)
        subprocess.run(["./generate"], cwd=path)
        emit("end_generate", algo)
    except Exception as e:
        print(e)
        print(f"Could not generate data for: {algo}")
        print(f"Tried to execute: {os.path.join(path, 'generate')}")


@socketio.on("fetch_names")
def push_names(*args):
    emit("push_names", {"algos": get_all_algos()})


@socketio.on("fetch_results")
def push_results(names=None):
    algos = get_all_algos() if names is None else names
    emit("push_results", {algo: to_dict(algo) for algo in algos})


@socketio.on("message")
def print_msg(msg):
    print(msg)


@socketio.on('connect')
def test_connect():
    print("Client connected")
    push_names()
    push_results()


@socketio.on('disconnect')
def test_disconnect():
    print('Client disconnected')


def get_generate_args(algo):
    spec = importlib.util.spec_from_file_location(algo, get_path(algo))
    m = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(m)
    return m.ARGUMENTS


@socketio.on("fetch_generate_args")
def push_generate_args(algo):
    try:
        args = get_generate_args(algo)
        emit("push_generate_args", list(args))
    except Exception:
        emit("notification", f"An error occured while fetching generate args"
             " for {algo}")


if __name__ == '__main__':
    socketio.run(app,
                 debug=True,
                 use_reloader=True)
